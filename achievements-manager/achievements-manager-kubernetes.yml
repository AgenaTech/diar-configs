server:
  port: 8080
spring:
  kafka:
    enabled: true
    consumer:
      group-id: profiles-achievements
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      profiles-topic.name: user-profile
      properties:
        spring.json.trusted.packages: "*"
        spring.json.type.mapping: profile:com.agenatech.achievementsmanager.client.kafka.payload.UserProfile
        bootstrap.servers: b-1.kafkadev.ew7c9m.c2.kafka.eu-north-1.amazonaws.com:9094, b-2.kafkadev.ew7c9m.c2.kafka.eu-north-1.amazonaws.com:9094
        security.protocol: SSL
        session.timeout.ms: 45000
  datasource:
    url: jdbc:postgresql://database-dev-1.co7q08si9fnn.eu-north-1.rds.amazonaws.com:5432/achievements-manager?ssl=false
    username: postgres
    password: '{cipher}343c6565adc705290de2fc08085115b01920d8a9bc7bf5d745f64270d16f175e587ad17756561b5824053f6af8d71fac'
    hikari:
      maximum-pool-size: 5
      initial-pool-size: 1
      connection-timeout: 20000
  cache:
    type: none
    redis:
      max-idle-time: 604800000
  redis:
    ssl: true
    redisson:
      config: |
        masterSlaveServersConfig:
          retryAttempts: 3
          retryInterval: 1500
          loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> {}
          masterAddress: "redis://development-001.7rswex.0001.eun1.cache.amazonaws.com:6379"
          slaveAddresses:
            - "redis://development-002.7rswex.0001.eun1.cache.amazonaws.com:6379"
            - "redis://development-003.7rswex.0001.eun1.cache.amazonaws.com:6379"