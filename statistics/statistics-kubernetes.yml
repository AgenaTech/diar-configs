server:
  port: 8080

spring:
  kafka:
    enabled: true
    consumer:
      group-id: cards-execution-statistics
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      executed-card-topic:
        name: card-reply
        group-id: cards-execution-statistics
      profiles-topic:
        name: user-profile
        group-id: statistics
      properties:
        spring.json.trusted.packages: "*"
        spring.json.type.mapping: reply:com.agenatech.statistics.model.ExecutedCard,profile:com.agenatech.statistics.model.UserProfile
        bootstrap.servers: b-1.kafkaprod.i2y7xe.c2.kafka.eu-north-1.amazonaws.com:9094, b-2.kafkaprod.i2y7xe.c2.kafka.eu-north-1.amazonaws.com:9094
        security.protocol: SSL
        session.timeout.ms: 45000

  datasource:
    url: jdbc:postgresql://database-prod-1.co7q08si9fnn.eu-north-1.rds.amazonaws.com:5432/statistics-manager?ssl=false
    username: postgres
    password: '{cipher}2bbb2a04c46cec92488258782db047783ab20a46483bd31d5396b63359c9322e19f58976f80abf5bcb58d7734ced5121'
    hikari:
      connection-timeout: 20000

  cache:
    type: redis
    expiration:
      daily-presense:
        max-idle-time: 86400000
        ttl: 0
      between-dates-presence:
        max-idle-time: 30000
        ttl: 0
      by-year-presence:
        max-idle-time: 604800000
        ttl: 0
  redis:
    ssl: true
    redisson:
      config: |
        masterSlaveServersConfig:
          retryAttempts: 3
          retryInterval: 1500
          loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> {}
          masterAddress: "redis://prod-001.7rswex.0001.eun1.cache.amazonaws.com:6379"
          slaveAddresses:
            - "redis://prod-002.7rswex.0001.eun1.cache.amazonaws.com:6379"
            - "redis://prod-003.7rswex.0001.eun1.cache.amazonaws.com:6379"